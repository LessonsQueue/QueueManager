// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  admin         Boolean  @default(false)
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  refreshToken  String?  @unique
  verifiedToken String?  @unique

  createdQueues Queue[]
  joinedQueues  UserQueue[]

  @@map("users")
}

enum QueueStatus {
  PENDING
  COMPLETED
  SKIPPED
}

model Queue {
  id        String      @id @default(uuid())
  creatorId String      @map("creator_id")
  labId     String      @map("lab_id")
  status    QueueStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  creator      User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  participants UserQueue[]

  @@map("queues")
}

model UserQueue {
  userId  String @map("user_id")
  queueId String @map("queue_id")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  queue Queue @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@id([queueId, userId])
  @@map("user_queues")
}
